import os
import random
import pandas as pd
from datetime import datetime
import openai
import telebot
import vk_api
from transliterate import translit
import re

# üîπ API-–∫–ª—é—á–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
VK_TOKEN = os.getenv("VK_TOKEN")
CHANNEL_ID = "@somnia_ai"  # Telegram-–∫–∞–Ω–∞–ª
VK_GROUP_ID = "-229159722"  # ID –≥—Ä—É–ø–ø—ã VK (—Å–æ –∑–Ω–∞–∫–æ–º "-")

# üîπ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CSV_FILE = "content_plan.csv"
BLOG_FOLDER = "blog"
BLOG_INDEX = "blog.html"

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º API
# üîπ –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.OpenAI(api_key=OPENAI_API_KEY)
bot = telebot.TeleBot(TELEGRAM_TOKEN)
vk_session = vk_api.VkApi(token=VK_TOKEN)
vk = vk_session.get_api()

# üîπ SEO-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
SEO_KEYWORDS = [
    "—Å–æ–Ω–Ω–∏–∫", "—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤", "–∫ —á–µ–º—É —Å–Ω–∏—Ç—Å—è", "–ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å —á—Ç–æ", "–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è",
    "—Å–æ–Ω", "–∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–æ–≤", "–≤–æ —Å–Ω–µ", "–≤–∏–¥–µ—Ç—å –≤–æ —Å–Ω–µ", "—Å–æ–Ω–Ω–∏–∫ –æ–Ω–ª–∞–π–Ω", "Somnia AI",
    "—Å–æ–Ω–Ω–∏–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–∫–æ—à–º–∞—Ä", "—Å–æ–Ω–Ω–∏–∫ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ"
]

# üîπ –†–µ–∫–ª–∞–º–Ω—ã–µ –±–ª–æ–∫–∏
ADVERTISEMENTS = [
    "üîÆ –†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –≤–∞—à–∏ —Å–Ω—ã —Å –ø–æ–º–æ—â—å—é –ù–µ–π—Ä–æ—Å–µ—Ç–∏ ‚Üí Somnia AI https://t.me/SomniaAI_bot",
    "üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π ‚Üí telegram somnia_ai https://t.me/somnia_ai",
    "üåê –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –æ —Å–Ω–∞—Ö —á–∏—Ç–∞–π—Ç–µ –≤ –±–ª–æ–≥–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ ‚Üí somnia-ai.com https://somnia-ai.com/",
    "üì≤ –°–ø—Ä–æ—Å–∏—Ç–µ –ù–µ–π—Ä–æ—Å–µ—Ç—å Somnia AI –ø—Ä–æ –≤–∞—à —Å–æ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚Üí RuStore https://www.rustore.ru/catalog/app/com.somniaai.app"
]

# üîπ üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º—ã
def get_today_topic():
    try:
        df = pd.read_csv(CSV_FILE)
        df["date"] = pd.to_datetime(df["date"], format="%Y-%m-%d").dt.date
        today = datetime.now().date()
        topic_row = df[df["date"] == today]
        return topic_row.iloc[0]["topic"] if not topic_row.empty else None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV-—Ñ–∞–π–ª–∞: {e}")
        return None
    
# üîπ üìå –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ OpenAI
def generate_seo_keywords(topic):
    """OpenAI –ø–æ–¥–±–∏—Ä–∞–µ—Ç 3-5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö SEO-–∫–ª—é—á–µ–π –¥–ª—è —Ç–µ–º—ã"""
    try:
        prompt = f"""
        –¢—ã –ª—É—á—à–∏–π –≤ –º–∏—Ä–µ SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ü–æ–¥–±–µ—Ä–∏ 3-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É: "{topic}".
        –í—ã–±–∏—Ä–∞–π —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏ –∏—â—É—Ç –≤ –ø–æ–∏—Å–∫–µ –Ø–Ω–¥–µ–∫—Å.
        –û—Ç–¥–∞–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100,
            temperature=0.5
        )

        return response.choices[0].message.content.split(", ") if response.choices else []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI (SEO-–∫–ª—é—á–∏): {e}")
        return []

# üîπ üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
def generate_post(topic, platform, length, style):
    try:
        # SEO-–∫–ª—é—á–∏ 
        selected_keywords = random.sample(SEO_KEYWORDS, k=2)
        additional_keywords = generate_seo_keywords(topic)
        all_keywords = selected_keywords + additional_keywords[:2]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 4 –∫–ª—é—á–µ–π


        # üîπ üìå –í—ã–≤–æ–¥–∏–º SEO-–∫–ª—é—á–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(f"üìå SEO-–∫–ª—é—á–∏ ({platform}): {all_keywords}")

        prompt = f"""
        –í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Å–Ω–æ–≤ –∏ –ø–∏—à–µ—Ç–µ –ø–æ—Å—Ç –¥–ª—è {platform.upper()} –Ω–∞ —Ç–µ–º—É "{topic}".
        –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞: {style}. –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ {' –∏ '.join(all_keywords)} 2-3 —Ä–∞–∑–∞ –≤ —Ç–µ–∫—Å—Ç–µ.
        –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞: {"–∫—Ä–∞—Ç–∫–∏–π –ø–æ—Å—Ç c —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤" if length == "short" else "–ª–æ–Ω–≥—Ä–∏–¥, –≤ 4-5 –∞–±–∑–∞—Ü–µ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏"}.
        –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ "–°–Ω—ã - —ç—Ç–æ". –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å—Ç–µ 1-2 –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏.
        """

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=800 if length == "long" else 500,
            temperature=0.7
        )
        post_text = response.choices[0].message.content if response.choices else None
        return post_text, all_keywords  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π return, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI ({platform}): {e}")
        return None

# üîπ üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
def post_to_telegram(message, disable_web_page_preview=False):
    try:
        bot.send_message(CHANNEL_ID, message, disable_web_page_preview=disable_web_page_preview)
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

# üîπ üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ VK
def post_to_vk(message, hashtags):
    try:
        message = message + "\n\n" + hashtags
        owner_id = -abs(int(VK_GROUP_ID))
        response = vk.wall.post(owner_id=owner_id, from_group=1, message=message)
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ VK! ID –ø–æ—Å—Ç–∞: {response}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ VK: {e}")

def markdown_to_html(text):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Markdown –≤ HTML
    text = re.sub(r'(?m)^(######\s)(.*)$', r'<h6>\2</h6>', text)
    text = re.sub(r'(?m)^(#####\s)(.*)$', r'<h5>\2</h5>', text)
    text = re.sub(r'(?m)^(####\s)(.*)$', r'<h4>\2</h4>', text)
    text = re.sub(r'(?m)^(###\s)(.*)$', r'<h3>\2</h3>', text)
    text = re.sub(r'(?m)^(##\s)(.*)$', r'<h2>\2</h2>', text)
    text = re.sub(r'(?m)^(#\s)(.*)$', r'<h1>\2</h1>', text)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∂–∏—Ä–Ω–æ–≥–æ –∏ –∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    text = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', text)
    text = re.sub(r'\*(.*?)\*', r'<em>\1</em>', text)
    
    return text

# üîπ üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug (–ª–∞—Ç–∏–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL)
def generate_slug(title):
    slug = translit(title, 'ru', reversed=True)  # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É
    slug = re.sub(r'[^a-zA-Z0-9-]', '-', slug.lower())  # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    slug = re.sub(r'-+', '-', slug).strip('-')  # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
    return slug

# üîπ üìå –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
def save_blog_post(title, content, all_keywords):
    content = markdown_to_html(content)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Markdown –≤ HTML
    
    slug = generate_slug(title)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –¥–ª—è URL
    filename = f"{datetime.now().date()}-{slug}.html"  # –°–æ–∑–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞
    filepath = os.path.join(BLOG_FOLDER, filename)  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å
    
    keywords_str = ", ".join(all_keywords)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É


    html_template = f"""
    <html>
    <head>
        <title>{title} | Somnia AI</title>
        <meta name="description" content="{title}">
        <meta name="keywords" content="{keywords_str}"> 
        
        <!-- Canonical URL -->
        <link rel="canonical" href="https://somnia-ai.com/blog/{filename}">     
        
        <!-- –°—Ç–∏–ª–∏ -->
        <link rel="stylesheet" href="../css/article.css">       
    </head>
    <body>
        <div class="container">
            <p>{content.replace('\n', '<br>')}</p>
            <hr>
            <a href="blog.html">üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–ª–æ–≥—É</a>
        </div>    
    </body>
    </html>
    """

    with open(filepath, "w", encoding="utf-8") as f:
        f.write(html_template)

    update_blog_index(title, filename)  # ‚úÖ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º filename (slug) –≤ update_blog_index()

    print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")

# üîπ üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –±–ª–æ–≥–∞
def update_blog_index(title, filename):
    index_path = os.path.join(BLOG_FOLDER, BLOG_INDEX)

    articles = []
    existing_filenames = set()

    if os.path.exists(index_path):
        with open(index_path, "r", encoding="utf-8") as f:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π, –∏—Å–∫–ª—é—á–∞—è –ª–∏—à–Ω–∏–µ —Ç–µ–≥–∏
            for line in f:
                if line.strip().startswith("<li>"):
                    articles.append(line)
                    match = re.search(r'href="([^"]+)"', line)
                    if match:
                        existing_filenames.add(match.group(1))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å—Ç–∞—Ç—å—è –≤ —Å–ø–∏—Å–∫–µ
    if filename in existing_filenames:
        print(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç! –°—Ç–∞—Ç—å—è —Å —Ç–∞–∫–∏–º filename —É–∂–µ –µ—Å—Ç—å: {filename}")
        return  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ filename –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    if re.search(r'[–∞-—è–ê-–Ø]', filename):
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞! Filename —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {filename}")
        return  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫—É—é —Å—Å—ã–ª–∫—É

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å–ø–∏—Å–∫–∞
    new_entry = f'<li><a href="{filename}">{title}</a></li>\n'
    articles.insert(0, new_entry)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é –≤ –Ω–∞—á–∞–ª–æ

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
    with open(index_path, "w", encoding="utf-8") as f:
        f.write("<html>\n<head>\n<title>–ë–ª–æ–≥ Somnia AI</title>\n</head>\n<body>\n")
        f.write('<link rel="stylesheet" href="../css/blog.css">\n')  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        f.write("<h1>üìö –ë–ª–æ–≥ Somnia AI</h1>\n<ul>\n")
        f.writelines(articles)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        f.write("</ul>\n</body>\n</html>\n")

    print("‚úÖ –ë–ª–æ–≥-–∏–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª—ë–Ω!")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π –¥–ª–∏–Ω—ã –ø–æ—Å—Ç–∞
def get_random_length():
    length = "short"  # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ "short"
    print(f"üìå –í—ã–±—Ä–∞–Ω–∞ –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: {length}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É
    return length

# üîπ üìå –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–∏–Ω–≥–∞
topic = get_today_topic()

if topic:
    print(f"üéØ –¢–µ–º–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {topic}")

    # üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π –¥–ª–∏–Ω—ã –ø–æ—Å—Ç–æ–≤
    tg_length = get_random_length()  # –†–∞–Ω–¥–æ–º–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è Telegram
    vk_length = get_random_length()  # –†–∞–Ω–¥–æ–º–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    tg_post_text, _ = generate_post(topic, "telegram", tg_length, "–¥—Ä—É–∂–µ—Å–∫–∏–π")
    vk_post_text, vk_keywords = generate_post(topic, "vk", vk_length, "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π")
    blog_post_text, blog_keywords = generate_post(topic, "blog", "long", "—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π")

    # –†–∞–Ω–¥–æ–º–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
    ad = random.choice(ADVERTISEMENTS)

    # üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
    if tg_post_text:
        cleaned_tg_text = tg_post_text.replace('#', '').replace('*', '')  # –£–±–∏—Ä–∞–µ–º Markdown-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        formatted_message = f"{cleaned_tg_text.split('\n', 1)[0]}\n{cleaned_tg_text.split('\n', 1)[1]}" if '\n' in cleaned_tg_text else cleaned_tg_text
        tg_hashtags = " ".join([f"#{word.replace(' ', '_')}" for word in vk_keywords])  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤
        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        final_message = f"{formatted_message}\n\n{ad}\n\n{tg_hashtags}"
        post_to_telegram(final_message, disable_web_page_preview=True)  # –¢–µ–ø–µ—Ä—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ


    # üîµ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    if vk_post_text:
        clean_vk_text = vk_post_text.replace("#", "").replace("*", "")  # –£–±–∏—Ä–∞–µ–º Markdown-—Å–∏–º–≤–æ–ª—ã
        hashtags = " ".join([f"#{word.replace(' ', '_')}" for word in vk_keywords])  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤
        post_to_vk(f"{clean_vk_text}\n\n{ad}", hashtags)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∫–ª–∞–º–æ–π –∏ —Ö—ç—à—Ç–µ–≥–∞–º–∏


    # üåç –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –±–ª–æ–≥
    if blog_post_text:
        blog_post_with_ad = f"{blog_post_text}\n\n<hr>\n<p><strong>{ad}</strong></p>"  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É –≤ –±–ª–æ–≥-—Å—Ç–∞—Ç—å—é
        save_blog_post(topic, blog_post_with_ad, blog_keywords)
        update_blog_index(topic, f"{datetime.now().date()}-{topic.lower().replace(' ', '-').replace('?', '')}.html")

else:
    print("‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç–µ–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
